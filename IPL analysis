# Import required libraries
import pandas as pd
from matplotlib import pyplot as plt
import seaborn as sns
import numpy as np

# Load the dataset
file_path = r"C:\Users\Hp\Documents\Data\matches.csv"
ipl = pd.read_csv(file_path)

# 1. Check the first few rows of the dataset
print(ipl.head())

# 2. Check the shape of the dataset
print(ipl.shape)

# 3. Analyze Man of the Match awards
print(ipl['player_of_match'].value_counts())
print(ipl['player_of_match'].value_counts()[0:5])

# Bar plot visualization for the top 5 Man of the Match awards
plt.figure(figsize=(5, 5))
plt.bar(
    list(ipl['player_of_match'].value_counts()[0:5].keys()),
    list(ipl['player_of_match'].value_counts()[0:5]),
)
plt.title("Top 5 Players with Most Man of the Match Awards")
plt.show()

# 4. Analyze result frequency
print(ipl['result'].value_counts())

# 5. Toss wins by each team
print(ipl['toss_winner'].value_counts())

# 6. Analyze wins after batting first
batting_first = ipl[ipl['win_by_runs'] != 0]
print(batting_first.head())

# Histogram visualization for wins by runs
plt.figure(figsize=(7, 7))
plt.hist(batting_first['win_by_runs'], bins=20, color='skyblue', edgecolor='black')
plt.title("Wins by Runs Distribution")
plt.show()

# Bar plot visualization for top 3 teams with most wins after batting first
print(batting_first['winner'].value_counts())
plt.figure(figsize=(7, 7))
plt.bar(
    list(batting_first['winner'].value_counts()[0:3].keys()),
    list(batting_first['winner'].value_counts()[0:3]),
    color=["blue", "yellow", "orange"],
)
plt.title("Top 3 Teams with Most Wins after Batting First")
plt.show()

# Pie chart visualization for distribution of wins after batting first
plt.figure(figsize=(7, 7))
plt.pie(
    list(batting_first['winner'].value_counts()),
    labels=list(batting_first['winner'].value_counts().keys()),
    autopct='%0.1f%%',
)
plt.title("Distribution of Wins after Batting First")
plt.show()

# 7. Analyze wins after batting second
batting_second = ipl[ipl['win_by_wickets'] != 0]
print(batting_second.head())

# Histogram visualization for wins by wickets
plt.figure(figsize=(7, 7))
plt.hist(
    batting_second['win_by_wickets'], bins=30, color='lightgreen', edgecolor='black'
)
plt.title("Wins by Wickets Distribution")
plt.show()

# Bar plot visualization for top 3 teams with most wins after batting second
print(batting_second['winner'].value_counts())
plt.figure(figsize=(7, 7))
plt.bar(
    list(batting_second['winner'].value_counts()[0:3].keys()),
    list(batting_second['winner'].value_counts()[0:3]),
    color=["blue", "green", "orange"],
)
plt.title("Top 3 Teams with Most Wins after Batting Second")
plt.show()

# Pie chart visualization for distribution of wins after batting second
plt.figure(figsize=(7, 7))
plt.pie(
    list(batting_second['winner'].value_counts()),
    labels=list(batting_second['winner'].value_counts().keys()),
    autopct='%0.1f%%',
)
plt.title("Distribution of Wins after Batting Second")
plt.show()

# 8. Matches played per season
print(ipl['season'].value_counts())
matches_per_season = ipl['season'].value_counts().sort_index()

# Bar plot visualization for matches per season
plt.figure(figsize=(10, 6))
matches_per_season.plot(kind='bar', color='skyblue')
plt.title("Number of Matches Per Season")
plt.xlabel("Season")
plt.ylabel("Number of Matches")
plt.xticks(rotation=45)
plt.show()

# 9. Matches played in each city
print(ipl['city'].value_counts())

# 10. Longest winning streak for each team
winning_streaks = ipl.groupby('winner').apply(
    lambda x: (x['winner'] != x['winner'].shift()).cumsum().value_counts().max()
)
print("Longest winning streaks for each team:")
print(winning_streaks)

# 11. Home vs. Away performances
ipl['home_team'] = ipl['city']  
home_wins = ipl[ipl['winner'] == ipl['home_team']]['winner'].value_counts()
away_wins = ipl[ipl['winner'] != ipl['home_team']]['winner'].value_counts()
print("Home wins by team:")
print(home_wins)
print("Away wins by team:")
print(away_wins)

# 12. Toss impact analysis
print(np.sum(ipl['toss_winner'] == ipl['winner']))
print((np.sum(ipl['toss_winner'] == ipl['winner']) / len(ipl)) * 100)

# Toss outcome visualization
toss_winner_match_winner = (ipl['toss_winner'] == ipl['winner']).value_counts()
toss_winner_match_winner.index = ['Lost', 'Won']

# Bar plot visualization for impact of toss on match outcomes
plt.figure(figsize=(6, 4))
toss_winner_match_winner.plot(kind='bar', color=['#ff9999', '#99ff99'])
plt.title("Impact of Toss on Match Outcomes")
plt.ylabel("Number of Matches")
plt.xlabel("Outcome")
plt.xticks(rotation=0)
plt.show()

# 13. Seasonal performance trends
seasonal_performance = ipl.groupby(['season', 'winner']).size().unstack(fill_value=0)
print("Seasonal team performance trends:")
print(seasonal_performance)

# 14. Top players and their impact on team wins
top_players = ipl['player_of_match'].value_counts().head(5).index
player_impact = ipl[ipl['player_of_match'].isin(top_players)].groupby(
    ['player_of_match', 'winner']
).size().unstack(fill_value=0)
print("Top players and their impact on team wins:")
print(player_impact)

# 15. Analyze matches with close margins
close_matches = ipl[(ipl['win_by_runs'] < 10) | (ipl['win_by_wickets'] < 2)]
print("Matches with close margins:")
print(close_matches)

# 16. Average win margins by team
average_margins = ipl.groupby('winner')[['win_by_runs', 'win_by_wickets']].mean()
print("Average win margins by team:")
print(average_margins)

# 17. Team performance: Batting first vs. second
batting_first_wins = ipl[ipl['win_by_runs'] > 0]['winner'].value_counts()
batting_second_wins = ipl[ipl['win_by_wickets'] > 0]['winner'].value_counts()
team_performance = pd.DataFrame(
    {
        'Batting First Wins': batting_first_wins,
        'Batting Second Wins': batting_second_wins,
    }
).fillna(0)

# Bar plot visualization for team performance
team_performance.head(5).plot(
    kind='bar', figsize=(10, 6), color=['#ff9999', '#66b3ff']
)
plt.title("Top Teams: Batting First vs. Batting Second Wins")
plt.ylabel("Number of Wins")
plt.xlabel("Teams")
plt.xticks(rotation=45)
plt.legend(title="Win Type")
plt.show()

# 18. Distribution of run margins
run_margins = ipl[ipl['win_by_runs'] > 0]['win_by_runs']

# Histogram visualization for run margins
plt.figure(figsize=(10, 6))
plt.hist(run_margins, bins=20, color='#99ff99', edgecolor='black')
plt.title("Distribution of Run Margins for Batting First Wins")
plt.xlabel("Run Margin")
plt.ylabel("Frequency")
plt.show()
